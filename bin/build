#!/bin/bash

set -eu

redis_version=${REDIS_VERSION:-5.0.5}
accept_redis_download=${ACCEPT_REDIS_DOWNLOAD:-0}

layer_dir=$1
buildpack_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

echo "---> Redis Buildpack"
cp -r $buildpack_dir/layer/* $layer_dir/

redis_dependency=$(cat $buildpack_dir/buildpack.toml | yj -t | jq -r --arg version $redis_version '.metadata.dependencies | map(select(.id=="redis" and .version==$version))')
if [[ "$redis_dependency" == "[]" ]]; then
  if [[ "${accept_redis_download}" == "1" ]]; then
    echo "     Attempting download of Redis $redis_version"
    redis_src_url="http://download.redis.io/releases/redis-${redis_version}.tar.gz"
  else
    echo "     ERROR: Unknown/not supported version of Redis $redis_version"
    echo "     Force download with \$ACCEPT_REDIS_DOWNLOAD=1"
    exit 1
  fi
fi

if [[ ${redis_src_url:-X} != "X" ]]; then
(
  cd $buildpack_dir/vendor
  curl -LO $redis_src_url
)
fi

layer_redis_version=$($layer_dir/redis/bin/redis-cli 2>/dev/null -v | awk '{print $2}')
if [[ "${layer_redis_version:-X}" == "$redis_version" ]] ; then
  echo "---> Reusing Redis $layer_redis_version"
else
(
  echo "---> Install Redis $redis_version"
  redis_tgz=$buildpack_dir/vendor/redis-$redis_version.tar.gz

  redis_src_dir=$(mktemp -d)
  function atexit {
    rm -rf $redis_src_dir
  }
  trap atexit EXIT
  cd $redis_src_dir
  tar xfz $redis_tgz
  cd redis*/

  mkdir -p $layer_dir/redis
  make PREFIX=$layer_dir/redis install
)
fi