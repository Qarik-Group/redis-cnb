#!/bin/bash

set -eu

layer_dir=$1
buildpack_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

redis_major_version=${REDIS_MAJOR_VERION:-5}

redis_dependency=$(cat $buildpack_dir/buildpack.toml | yj -t | jq -r --arg version $redis_major_version '.metadata.dependencies | map(select(.id=="redis" and .major_version==$version)) | first // "X"')
[[ "$redis_dependency" == "X" ]] && { echo "     ERROR: Unknown \$REDIS_MAJOR_VERSION"; exit 1; }
redis_version=${REDIS_VERSION:-$(echo "$redis_dependency" | jq -r ".version")}

redis_src_url="http://download.redis.io/releases/redis-${redis_version}.tar.gz"

echo "---> Redis Buildpack"
mkdir -p $layer_dir
cp -r $buildpack_dir/layer/* $layer_dir/

layer_redis_version=$($layer_dir/redis/bin/redis-cli 2>/dev/null -v | awk '{print $2}')
if [[ "${layer_redis_version:-X}" == "$redis_version" ]] ; then
  echo "---> Reusing Redis $layer_redis_version"
else
(
  echo "---> Install Redis $redis_version"


  redis_tgz=$buildpack_dir/vendor/redis-$redis_version.tar.gz
  if [[ ! -f $redis_tgz ]]; then
  (
    echo "     Downloading Redis $redis_version"
    cd $buildpack_dir/vendor
    curl -L -o redis-$redis_version.tar.gz $redis_src_url
  )
  fi

  redis_src_dir=$(mktemp -d)
  function atexit {
    rm -rf $redis_src_dir
  }
  trap atexit EXIT
  cd $redis_src_dir
  tar xfz $redis_tgz
  cd redis*/

  mkdir -p $layer_dir/redis
  make PREFIX=$layer_dir/redis install
)
fi